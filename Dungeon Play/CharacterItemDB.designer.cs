#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dungeon_Play
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="InventoryDB")]
	public partial class CharacterItemDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCharacterItem(CharacterItem instance);
    partial void UpdateCharacterItem(CharacterItem instance);
    partial void DeleteCharacterItem(CharacterItem instance);
    #endregion
		
		public CharacterItemDBDataContext() : 
				base(global::Dungeon_Play.Properties.Settings.Default.InventoryDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CharacterItemDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CharacterItemDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CharacterItemDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CharacterItemDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CharacterItem> CharacterItems
		{
			get
			{
				return this.GetTable<CharacterItem>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CharacterItem")]
	public partial class CharacterItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _itemName;
		
		private string _bonusType;
		
		private string _bonusValue;
		
		private int _minDamage;
		
		private int _maxDamage;
		
		private int _attackValue;
		
		private int _armorClass;
		
		private int _weight;
		
		private double _volume;
		
		private decimal _price;
		
		private int _quantity;
		
		private int _slot;
		
		private System.Data.Linq.Binary _imageName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnitemNameChanging(string value);
    partial void OnitemNameChanged();
    partial void OnbonusTypeChanging(string value);
    partial void OnbonusTypeChanged();
    partial void OnbonusValueChanging(string value);
    partial void OnbonusValueChanged();
    partial void OnminDamageChanging(int value);
    partial void OnminDamageChanged();
    partial void OnmaxDamageChanging(int value);
    partial void OnmaxDamageChanged();
    partial void OnattackValueChanging(int value);
    partial void OnattackValueChanged();
    partial void OnarmorClassChanging(int value);
    partial void OnarmorClassChanged();
    partial void OnweightChanging(int value);
    partial void OnweightChanged();
    partial void OnvolumeChanging(double value);
    partial void OnvolumeChanged();
    partial void OnpriceChanging(decimal value);
    partial void OnpriceChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    partial void OnslotChanging(int value);
    partial void OnslotChanged();
    partial void OnimageNameChanging(System.Data.Linq.Binary value);
    partial void OnimageNameChanged();
    #endregion
		
		public CharacterItem()
		{
			OnCreated();
		}

		public CharacterItem(string name, int quantity, int slot)
        {
			_itemName = name;
			_quantity = quantity;
			_slot = slot;
        }
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string itemName
		{
			get
			{
				return this._itemName;
			}
			set
			{
				if ((this._itemName != value))
				{
					this.OnitemNameChanging(value);
					this.SendPropertyChanging();
					this._itemName = value;
					this.SendPropertyChanged("itemName");
					this.OnitemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bonusType", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string bonusType
		{
			get
			{
				return this._bonusType;
			}
			set
			{
				if ((this._bonusType != value))
				{
					this.OnbonusTypeChanging(value);
					this.SendPropertyChanging();
					this._bonusType = value;
					this.SendPropertyChanged("bonusType");
					this.OnbonusTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bonusValue", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string bonusValue
		{
			get
			{
				return this._bonusValue;
			}
			set
			{
				if ((this._bonusValue != value))
				{
					this.OnbonusValueChanging(value);
					this.SendPropertyChanging();
					this._bonusValue = value;
					this.SendPropertyChanged("bonusValue");
					this.OnbonusValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_minDamage", DbType="Int NOT NULL")]
		public int minDamage
		{
			get
			{
				return this._minDamage;
			}
			set
			{
				if ((this._minDamage != value))
				{
					this.OnminDamageChanging(value);
					this.SendPropertyChanging();
					this._minDamage = value;
					this.SendPropertyChanged("minDamage");
					this.OnminDamageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxDamage", DbType="Int NOT NULL")]
		public int maxDamage
		{
			get
			{
				return this._maxDamage;
			}
			set
			{
				if ((this._maxDamage != value))
				{
					this.OnmaxDamageChanging(value);
					this.SendPropertyChanging();
					this._maxDamage = value;
					this.SendPropertyChanged("maxDamage");
					this.OnmaxDamageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attackValue", DbType="Int NOT NULL")]
		public int attackValue
		{
			get
			{
				return this._attackValue;
			}
			set
			{
				if ((this._attackValue != value))
				{
					this.OnattackValueChanging(value);
					this.SendPropertyChanging();
					this._attackValue = value;
					this.SendPropertyChanged("attackValue");
					this.OnattackValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_armorClass", DbType="Int NOT NULL")]
		public int armorClass
		{
			get
			{
				return this._armorClass;
			}
			set
			{
				if ((this._armorClass != value))
				{
					this.OnarmorClassChanging(value);
					this.SendPropertyChanging();
					this._armorClass = value;
					this.SendPropertyChanged("armorClass");
					this.OnarmorClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weight", DbType="Int NOT NULL")]
		public int weight
		{
			get
			{
				return this._weight;
			}
			set
			{
				if ((this._weight != value))
				{
					this.OnweightChanging(value);
					this.SendPropertyChanging();
					this._weight = value;
					this.SendPropertyChanged("weight");
					this.OnweightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_volume", DbType="Float NOT NULL")]
		public double volume
		{
			get
			{
				return this._volume;
			}
			set
			{
				if ((this._volume != value))
				{
					this.OnvolumeChanging(value);
					this.SendPropertyChanging();
					this._volume = value;
					this.SendPropertyChanged("volume");
					this.OnvolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Money NOT NULL")]
		public decimal price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int NOT NULL")]
		public int quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_slot", DbType="Int NOT NULL")]
		public int slot
		{
			get
			{
				return this._slot;
			}
			set
			{
				if ((this._slot != value))
				{
					this.OnslotChanging(value);
					this.SendPropertyChanging();
					this._slot = value;
					this.SendPropertyChanged("slot");
					this.OnslotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageName", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary imageName
		{
			get
			{
				return this._imageName;
			}
			set
			{
				if ((this._imageName != value))
				{
					this.OnimageNameChanging(value);
					this.SendPropertyChanging();
					this._imageName = value;
					this.SendPropertyChanged("imageName");
					this.OnimageNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
